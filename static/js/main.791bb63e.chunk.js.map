{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","_ref","title","react_default","a","createElement","className","Overview","_ref2","overview","VoteAvg","_ref3","voteAvg","ReleaseDate","_ref4","releaseDate","movieCardStyle","display","buttonBarStyle","_buttonBarStyle","position","Object","defineProperty","MovieCard","props","_useState","useState","_useState2","slicedToArray","favorited","setFavorited","Card_default","style","sizes","srcSet","concat","poster","alt","CardContent_default","flexGrow","App_Title","App_VoteAvg","App_ReleaseDate","App_Overview","CardActions_default","onClick","toggleFave","handleClick","Button_default","color","variant","MovieApp","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadMovies","_ref5","asyncToGenerator","regenerator_default","mark","_callee","key","response","data","movies","wrap","_context","prev","next","fetch","sent","json","results","setState","stop","_x","apply","arguments","addRemoveFave","oldState","toConsumableArray","state","found","findIndex","x","splice","push","find","sortBy","favoriteToggle","process","moviesToShow","_this2","sort","b","Number","vote_average","toUpperCase","Date","release_date","toString","map","movie","App_MovieCard","id","poster_path","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.791bb63e.chunk.js","sourcesContent":["import React, { Component, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\n\nimport './App.css';\n\nconst key = process.env.REACT_APP_SECRET_KEY;\n\n//stateless components\nconst Title = ({title}) => <h1 className = 'Title'> {title} </h1>;\nconst Overview = ({overview}) => <div className = 'Overview'> {overview} </div>;\nconst VoteAvg = ({voteAvg}) => <div className = 'VoteAvg'> Rating: {voteAvg} </div>;\nconst ReleaseDate = ({releaseDate}) => <div className = 'ReleaseDate'> Date: {releaseDate} </div>;\n\nconst movieCardStyle = {\n  display:\"flex\",\n}\n\nconst buttonBarStyle = {\n  position: \"-webkit-sticky\",\n  position:\"sticky\",\n  top:0\n}\n\n\n//Movie Card Component with Hook\nconst MovieCard = (props) => {\n  \n  const [favorited, setFavorited] = useState(false);\n  \n  const handleClick = (favorited, props) => {\n    setFavorited(!favorited);\n    return props.toggleFave(props.title);\n  }\n  \n  return(\n          <Card className = \"Movie-Card\" style={movieCardStyle}>\n\n           <img className = \"Poster\"\n            sizes=\"(max-width:342px) 200px,\n                   (min-width:342px) 20em\" \n            srcSet={`https://image.tmdb.org/t/p/w342${props.poster} 280w, \n                     https://image.tmdb.org/t/p/w500${props.poster} 500w`}\n            alt={props.title}/>\n\n            <CardContent style={{flexGrow:1}} className = 'Movie-Card-Info'>\n              <Title title = {props.title} />\n              <VoteAvg voteAvg = {props.voteAvg} />\n              <ReleaseDate releaseDate = {props.releaseDate}/>\n              <Overview overview = {props.overview}/>\n            </CardContent>\n\n            <CardActions  onClick={() => handleClick(favorited, props)}>\n                <Button className = \"favorite\" color = {favorited ? \"secondary\" : \"primary\"} variant = \"contained\"> favorite/unfavorite </Button>\n            </CardActions>\n\n          </Card>\n  )\n\n}\nclass MovieApp extends Component {\n  constructor(props){\n    super(props);\n    // switched out manual bind for arrow function\n    //bind so addRemoveFave knows to refer to Movie App's state when passed into child\n    // this.addRemoveFave = this.addRemoveFave.bind(this);\n    this.state = {\n        sortBy:\"None\",\n        favoriteToggle:false,\n        favorited:[],\n        movies: [],\n\n    }\n  }\n\n  //Call the API during componentWillMount\n  componentWillMount(){\n    this.loadMovies(key);\n  }\n\n  loadMovies = async (key) => {\n    // Used to be in componentDidMount\n    // fetch(\"https://api.themoviedb.org/3/movie/now_playing?api_key=\"+key+\"&language=en-US\")\n    // .then(response => {\n    //   return response.json();\n    // })\n    // //Create movie's array from response.results\n    // .then(data => {\n    //   this.setState({movies: data.results});\n    //   return data.results;\n    // });\n    const response = await fetch(`https://api.themoviedb.org/3/movie/now_playing?api_key=${key}&language=en-US`);\n    const data = await response.json();\n    const movies = await data.results;\n    this.setState({movies: movies});\n  }\n\n  addRemoveFave = (title) => {\n      //Make a copy of state's favorited array\n      let oldState = [...this.state.favorited];\n\n      //find the title\n      const found = oldState.findIndex((x)=> x.title === title );\n\n      //if it's found, remove it from the old state, else add the movie by looking for it's object in the movies array\n      found >= 0 ? oldState.splice(found,1) : oldState.push( this.state.movies.find( (x) => x.title === title));\n      \n      //update favorited\n      this.setState({favorited:oldState});\n    \n  }\n\n\n\n\n  render() {\n    let moviesToShow;\n    //if favorite is toggled, show favorite movies. Else, show regular list of movies\n    this.state.favoriteToggle ? moviesToShow = [...this.state.favorited] : moviesToShow = [...this.state.movies];\n    \n    //sort in ascending order for different filters\n    moviesToShow.sort( (a,b)=>{\n      switch(this.state.sortBy){\n        case \"rating\":\n          return Number(a.vote_average) - Number(b.vote_average);\n        case \"title\":\n          return a.title.toUpperCase() < b.title.toUpperCase() ? -1 : 1;\n        case \"releaseDate\":\n          return new Date(a.release_date) - new Date(b.release_date);\n        default:\n          return new Date(a.release_date) - new Date(b.release_date);\n\n      }\n\n    });\n\n    return(\n        <div className=\"MovieApp\">\n\n        <div className=\"button-bar\" style={buttonBarStyle}>\n          <Button variant = \"contained\" onClick={()=>this.setState({sortBy:\"rating\"})}> Rating </Button>\n          <Button variant = \"contained\" onClick={()=>this.setState({sortBy:\"releaseDate\"})}> Release Date </Button>\n          <Button variant = \"contained\" onClick={()=>this.setState({sortBy:\"title\"})}> Title </Button>\n          <Button variant = \"contained\" color ={this.state.favoriteToggle ? \"secondary\" : \"primary\"} onClick={()=>this.state.favoriteToggle ? this.setState({favoriteToggle:false}) : this.setState({favoriteToggle:true})}> favorited: {this.state.favoriteToggle.toString()} </Button>\n        </div>\n\n\n          {\n            //generate moviecards from moviestoshow array\n            moviesToShow.map(movie => <MovieCard \n                                                key ={movie.id}\n                                                poster = {movie.poster_path}\n                                                title = {movie.title} \n                                                overview = {movie.overview} \n                                                voteAvg = {movie.vote_average}\n                                                releaseDate = {movie.release_date}\n                                                toggleFave = {this.addRemoveFave}\n\n                                      />)\n          }\n\n\n        </div>  \n\n    );\n  }\n}\n\nexport default MovieApp;\n\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MovieApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MovieApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}